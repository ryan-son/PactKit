{"abstract":[{"type":"text","text":"A secure communication channel established after a successful handshake."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"This object holds the symmetric session key and handles encryption and decryption for a single session."},{"type":"text","text":" "},{"type":"text","text":"You obtain a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" object from a successful call to "},{"code":"Pact.Host.establishChannel(with:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Usage-Example","text":"Usage Example","type":"heading"},{"code":["do {","  let (channel, response) = try host.establishChannel(with: counterpartKey)","  \/\/ Send the response back to the counterpart...","","  let secretMessage = \"This is a secret!\"","  let encryptedData = try channel.encrypt(message: secretMessage)","","  \/\/ Send encryptedData over the network...","","  let receivedData: Data = \/\/ ... from counterpart","  let decryptedMessage = try channel.decrypt(encryptedData: receivedData)","","  print(decryptedMessage) \/\/ \"This is a secret from the other side!\"","} catch {","  print(\"Error during secure communication: \\(error)\")","}"],"syntax":"swift","type":"codeListing"}]}],"topicSections":[{"identifiers":["doc:\/\/PactKitCore\/documentation\/PactKitCore\/Pact\/Channel\/decrypt(encryptedData:)","doc:\/\/PactKitCore\/documentation\/PactKitCore\/Pact\/Channel\/encrypt(message:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/pactkitcore\/pact\/channel"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/PactKitCore\/documentation\/PactKitCore","doc:\/\/PactKitCore\/documentation\/PactKitCore\/Pact"]]},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"Channel"}],"title":"Pact.Channel","roleHeading":"Class","extendedModule":"PactKitCore","symbolKind":"class","modules":[{"name":"PactKitCore"}],"externalID":"s:11PactKitCore0A0O7ChannelC","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}]},"identifier":{"url":"doc:\/\/PactKitCore\/documentation\/PactKitCore\/Pact\/Channel","interfaceLanguage":"swift"},"references":{"doc://PactKitCore/documentation/PactKitCore":{"title":"PactKitCore","abstract":[],"kind":"symbol","url":"\/documentation\/pactkitcore","role":"collection","type":"topic","identifier":"doc:\/\/PactKitCore\/documentation\/PactKitCore"},"doc://PactKitCore/documentation/PactKitCore/Pact/Channel/decrypt(encryptedData:)":{"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decrypt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"encryptedData","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10Foundation4DataV","text":"Data","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}],"identifier":"doc:\/\/PactKitCore\/documentation\/PactKitCore\/Pact\/Channel\/decrypt(encryptedData:)","kind":"symbol","title":"decrypt(encryptedData:)","url":"\/documentation\/pactkitcore\/pact\/channel\/decrypt(encrypteddata:)","abstract":[{"text":"Decrypts data encrypted with the session key.","type":"text"}]},"doc://PactKitCore/documentation/PactKitCore/Pact/Channel":{"navigatorTitle":[{"kind":"identifier","text":"Channel"}],"abstract":[{"text":"A secure communication channel established after a successful handshake.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"title":"Pact.Channel","kind":"symbol","type":"topic","identifier":"doc:\/\/PactKitCore\/documentation\/PactKitCore\/Pact\/Channel","url":"\/documentation\/pactkitcore\/pact\/channel"},"doc://PactKitCore/documentation/PactKitCore/Pact":{"kind":"symbol","navigatorTitle":[{"text":"Pact","kind":"identifier"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Pact","kind":"identifier"}],"role":"symbol","url":"\/documentation\/pactkitcore\/pact","title":"Pact","identifier":"doc:\/\/PactKitCore\/documentation\/PactKitCore\/Pact","abstract":[{"text":"A namespace for the PactKit framework, providing an entry point for all functionalities.","type":"text"}]},"doc://PactKitCore/documentation/PactKitCore/Pact/Channel/encrypt(message:)":{"kind":"symbol","url":"\/documentation\/pactkitcore\/pact\/channel\/encrypt(message:)","type":"topic","title":"encrypt(message:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encrypt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Data","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation4DataV"}],"abstract":[{"text":"Encrypts a plaintext string using AES-GCM with the session key.","type":"text"}],"identifier":"doc:\/\/PactKitCore\/documentation\/PactKitCore\/Pact\/Channel\/encrypt(message:)"}}}